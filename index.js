const https = require('https');
const querystring = require('querystring');

function escapeMarkdown(text) {
    return text.replace(/[-_.*[\]()`~]/g, '\\$&');
}

module.exports.handler = async function (event, context) {
    try {
        const gitlabEvent = JSON.parse(event.body);
        let message = '';
        console.log(event.body)

        switch (gitlabEvent.object_kind) {
            case 'merge_request':
                if (gitlabEvent.object_attributes.action === 'approved') {
                    message = formatMergeRequestApproved(gitlabEvent);
                } else if (gitlabEvent.object_attributes.action === 'open') {
                    message = formatMergeRequestCreated(gitlabEvent);
                } else if (gitlabEvent.object_attributes.action === 'close') {
                    message = formatMergeRequestClosed(gitlabEvent);
                } else if (gitlabEvent.object_attributes.action === 'merge') {
                    message = formatMergeRequestMerged(gitlabEvent);
                } else {
                    message = `[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—à–Ω –ø–æ merge_request ${gitlabEvent.object_attributes.action}`
                }
                break;
            case 'pipeline':
                message = formatPipelineEvent(gitlabEvent);
                break;
            case 'note':
                if (gitlabEvent.object_attributes.noteable_type === 'MergeRequest') {
                    message = formatMergeRequestComment(gitlabEvent);
                }
                break;
            default:
                message = `[DEBUG] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ${gitlabEvent.object_kind}`;
        }

        const telegramMessage = message;
        await sendTelegramMessage(telegramMessage);

        return {
            statusCode: 200,
            body: '–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è GitLab:', error);
        return {
            statusCode: 500,
            body: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è GitLab',
        };
    }
};

function formatMergeRequestCreated(event) {
    const user = escapeMarkdown(event.user.name);
    const title = escapeMarkdown(event.object_attributes.title);
    const sourceBranch = escapeMarkdown(event.object_attributes.source_branch);
    const targetBranch = escapeMarkdown(event.object_attributes.target_branch);
    const mrLink = escapeMarkdown(event.object_attributes.url);
    return `üü¢ –ù–æ–≤—ã–π –º–µ—Ä–¥–∂ [${title}](${mrLink}) –æ—Ç *${user}*
    –í–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: *${sourceBranch}*  
    –¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞: *${targetBranch}*`;
}

function formatMergeRequestClosed(event) {
    const user = escapeMarkdown(event.user.name);
    const title = escapeMarkdown(event.object_attributes.title);
    const mrLink = escapeMarkdown(event.object_attributes.url); // –î–æ–±–∞–≤–ª—è–µ–º URL –º–µ—Ä–¥–∂ —Ä–µ–∫–≤–µ—Å—Ç–∞
    return `M–µ—Ä–¥–∂ [${title}](${mrLink}) –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º *${user}*`;
}

function formatMergeRequestComment(event) {
    const user = escapeMarkdown(event.user.name);
    const mrTitle = escapeMarkdown(event.merge_request.title);
    const comment = escapeMarkdown(event.object_attributes.note);
    const mrLink = escapeMarkdown(event.merge_request.url);
    return `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–µ—Ä–¥–∂—É [${mrTitle}](${mrLink}) –æ—Ç *${user}*:
    \`${comment}\``;
}

function formatMergeRequestApproved(event) {
    const user = escapeMarkdown(event.user.name);
    const title = escapeMarkdown(event.object_attributes.title);
    const sourceBranch = escapeMarkdown(event.object_attributes.source_branch);
    const targetBranch = escapeMarkdown(event.object_attributes.target_branch);
    const mrLink = escapeMarkdown(event.object_attributes.url); // –î–æ–±–∞–≤–ª—è–µ–º URL –º–µ—Ä–¥–∂ —Ä–µ–∫–≤–µ—Å—Ç–∞
    return `üü° **–ú–µ—Ä–¥–∂ [${title}](${mrLink}) –∞–ø—Ä—É–≤–Ω—É—Ç *${user}*:
    **–í–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:** ${sourceBranch}
    **–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞:** ${targetBranch}`;
}

function formatMergeRequestMerged(event) {
    const user = escapeMarkdown(event.user.name);
    const title = escapeMarkdown(event.object_attributes.title);
    const sourceBranch = escapeMarkdown(event.object_attributes.source_branch);
    const targetBranch = escapeMarkdown(event.object_attributes.target_branch);
    const mergeUser = escapeMarkdown(event.object_attributes.last_commit.author.name);
    const mrLink = escapeMarkdown(event.object_attributes.url); // –î–æ–±–∞–≤–ª—è–µ–º URL –º–µ—Ä–¥–∂ —Ä–µ–∫–≤–µ—Å—Ç–∞
    return `üü£ **–ú–µ—Ä–¥–∂ [${title}](${mrLink}) —Å–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user}**:
    **–í–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:** ${sourceBranch}
    **–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞:** ${targetBranch}`;
}

function formatPipelineEvent(event) {
    const pipelineStatus = escapeMarkdown(event.object_attributes.status);
    const pipelineName = escapeMarkdown(event.object_attributes?.name || event.commit?.title || '');
    return `üîß –ü–∞–π–ø–ª–∞–π–Ω *${pipelineName}*, —Å—Ç–∞—Ç—É—Å: *${pipelineStatus}*`;
}

async function sendTelegramMessage(message) {
    const queryParams = querystring.stringify({ chat_id: '{YOUR_CHAT_ID_HERE}', text: message, parse_mode: 'MarkdownV2' });
    // parse_mode: 'MarkdownV2'
    await https.get(`https://api.telegram.org/bot{YOUR_BOT_TOKEN_HERE}/sendMessage?${queryParams}`);
}